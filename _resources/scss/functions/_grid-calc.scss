// Calculate grid values
$gutter: percentage($gutterInPx / $rowMaxWidth);

// Return single column width
@function oneCol($hybrid-grid: false) {
	@if ($hybrid-grid == true){
		@return (100% / $hybrid);
	}
	@else{
		@return (100% / $cols);
	}
}

// Return single column width as a percentage of single column and single gutter
@function oneColRatio() {
	@return percentage( (oneCol()) / (oneCol() + $gutter) );
}

// Calculate Grid Column Widths
@function columns($num, $hybrid-grid: false){
	@if ($hybrid-grid == true) {
		@return (oneCol(true) * $num);
	}
	@else {
		@return (oneCol() * $num);
	}
}

// Calculate Push Class Margins
@function push_x($num, $is-hybrid: false) {
	@if $is-hybrid {
		@return (oneCol(true) * $num);
	}
	@else {
		@return (oneCol() * $num);
	}
}

// Calculate Pull Class Margins
// $num is number of columns to be pulled
// $width is number of columns of container that is being pulled
@function pull_x($num, $width, $is-hybrid: false) {
	@if $is-hybrid {
		@return -((oneCol(true) * $num) + (oneCol(true) * $width)); // Pull width + column width
	}
	@else {
		@return -((oneCol() * $num) + (oneCol() * $width)); // Pull width + column width
	}
}

// Calculate Centered Class Margins
@function centered($num, $hybrid-grid: false) {
	@if $hybrid-grid{
		@return 50% - ((($num * (oneCol(true))) + (($num - 1) * $gutter)) / 2);
	}
	@else{
		@return 50% - ((($num * (oneCol())) + (($num - 1) * $gutter)) / 2);
	}
}

// Create class names from column count integers
@function number-as-word($number){
	$w: "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven",
"twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen",
"twenty", "twenty-one", "twenty-two", "twenty-three", "twenty-four", "twenty-five", "twenty-six", "twenty-seven",
"twenty-eight", "twenty-nine", "thirty", "thirty-one", "thirty-two", "thirty-three",
"thirty-four", "thirty-five", "thirty-six";
	@return nth($w, $number);
}
