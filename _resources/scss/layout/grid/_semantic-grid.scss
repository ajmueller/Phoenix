@mixin row($nested: false, $padding: $gutterInPx) {
	@include box-sizing();
	@extend %clearfix;
	margin-left: 0; 
	margin-right: 0;
	min-width: 0;
	width: auto;

	@if $nested == nested {
		margin-top: $gutterInPx;
		padding: 0;

		&:first-child {
			margin-top: 0;
		}
	}
	@else {
		padding: $padding;
	}

	@include respond(tabletPortrait) {
		@if $nested == nested {
			max-width: none;
			min-width: 0px;
			padding: 0;
			width: auto;
		}
		@else {
			margin: 0 auto;
			max-width: $rowMaxWidth;
			min-width: $minDeviceWidth;
			width: 100%;
		}
	}
}

@mixin column($columns: $columns, $padding: $gutterInPx, $nested: false, $alignment: false) {
	@if $alignment == center {
		@extend %columnconfig;
		float: left;
		margin: 0;
		width: 100%;

		&:first-child {
			margin-top: 0;
		}

		@include respond(tabletPortrait) {
			float: none;
			margin-left: auto !important;
			margin-right: auto !important;
			margin-top: 0;
			width: columns($columns);
		}
	}
	@else {
		@extend %columnconfig;
		float: left;
		margin: 0;
		padding: $padding;
		width: 100%;

		@if $nested == nested {
			margin-top: $gutterInPx;

			&:first-child {
				margin-top: 0;
			}
		}

		@include respond(tabletPortrait) {
			margin-top: 0;
			width: columns($columns);

			&:first-child {
				margin-left: 0;
			}
		}
	}
}

@mixin hybrid($columns: $columns, $padding: $gutterInPx, $nested: false, $alignment: false) {
	@if $alignment == center   {
		@extend %columnconfig;
		float: left;
		margin-left: 0;
		margin-top: $gutterInPx;
		width: 100%;

		&:first-child {
			margin-top: 0;
		}

		@include respond(tabletPortrait) {
			float: none;
			margin-left: auto !important;
			margin-right: auto !important;
			margin-top: 0;
			width: columns($columns, true);
		}
	}
	@else {
		@extend %columnconfig;
		float: left;
		margin-top: $gutterInPx;
		padding: $padding;
		width: 100%;

		&:first-child {
			margin-top: 0;
		}

		@include respond(tabletPortrait) {
			float: none;
			margin-top: 0;
			width: columns($columns, true);
		}
	}
}

@mixin push($columns, $hybridGrid: false) {
	@if $hybridGrid == hybrid {
		margin-left: 0;

		@include respond(tabletPortrait) {
			margin-left: push_x($columns, true);
		}
	}
	@else {
		margin-left: 0;
		
		@include respond(tabletPortrait) {
			margin-left: push_x($columns);
			&:first-child {
				margin-left: push_x($columns, true);
			}
		}
	}
}

@mixin pull($columns: 0, $width: 0, $hybridGrid: false) {
	@if ($columns > 0 and $width > 0) {
		@if ($hybridGrid == hybrid) {
			margin-left: 0;

			@include respond(tabletPortrait) {
				margin-left: pull_x($columns, $width, true);
				&:first-child {
					margin-left: 0;
				}
			}
		}
		@else {
			margin-left: 0;

			@include respond(tabletPortrait) {
				margin-left: pull_x($columns, $width);
				&:first-child {
					margin-left: 0;
				}
			}
		}
	}
}


// Placeholders for the Semantic Grid

// Clearfix placeholder
%clearfix { @include clearfix(); }

// Clearfix placeholder for mobile
%mobilefix { @include mobilefix(); }

// Row placeholders
%row { @include row(); }
%nestedrow { @include row(nested); }

// Column Configuration placeholder
%columnconfig {
	@include box-sizing();
	float: $defaultFloat;
	min-height: 1px;
	position: relative;
}