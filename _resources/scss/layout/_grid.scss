/*=================================================

	+++ LE GRID +++
	A Responsive Grid -- Gumby defaults to a standard 960 grid,
	but you can change it to whatever you'd like.

 ==================================================*/

// Base (mobile) styles
body {
	min-width: 0;
	-ms-text-size-adjust: none;
	-webkit-text-size-adjust: none;
	width: 100%;
}
.container {
	margin-left: 0;
	margin-right: 0;
	min-width: 0;
}
.content {
	background-color: $white;
}
.row {
	@include box-sizing();
	margin-left: 0;
	margin-right: 0;
	min-width: 0;
	padding: $gutterInPx;
	width: 100%;

	.oldie & {
		max-width: $rowMaxWidth - ($gutterInPx * 2);
	}

	& + .row {
		padding-top: 0;
	}

	.row {
		margin-top: $gutterInPx;
		padding: 0;

		&:first-child {
			margin-top: 0;
		}
		
		.column, .columns {
			padding: 0;
		}
	}
	.column, .columns {
		margin-top: $gutterInPx;

		&:first-child {
			margin-top: 0;
		}

		@include respond(tabletPortrait) {
			margin-top: 0;
		}
	}
	.centered {
		margin: 0;
	}
}
.colgrid-image {
	@include respond(tabletPortrait) {
		background-image: -webkit-linear-gradient(left, $visibleGridColumnColor oneColRatio(), $visibleGridGutterColor oneColRatio());
		background-image: linear-gradient(90deg, $visibleGridColumnColor oneColRatio(), $visibleGridGutterColor oneColRatio());
		background-size: oneCol() + $gutter;
		@include clearfix();
	}
}
.column, .columns {
	float: none;
	margin-left: 0;
	margin-right: 0;
	width: auto;

	&:last-child {
		float: none;
		margin-right: 0;
	}
}

[class*="column"] {
	+ [class*="column"]:last-child {
		float: none;
	}
	&:before {
		display: table;
	}
	&:after {
		display: table;
		clear: both;
	}
}
[class^="push_"],
[class*="push_"],
[class^="pull_"],
[class*="pull_"] {
	margin-left: 0;
}

// Tablets and up
@include respond(tabletPortrait) {
	.content,
	.row {
		margin: 0 auto;
		max-width: $rowMaxWidth;
		min-width: $minDeviceWidth;
		width: 100%;

		.row {
			min-width: 0px;
		}
	}

	/* To fix the grid into a different size, set max-width to your desired width */

	.column, .columns {
		@include box-sizing();
		float: $defaultFloat !important;
		margin-left: $gutter;
		min-height: 1px;

		&.flush {
			margin-left: 0;
		}
	}

	.column:first-child, .columns:first-child, .alpha {
		margin-left: 0px;
	}

	.column.omega, .columns.omega {
		float: $switchFloat;
	}

	// Generate the Grid

	/* Column Classes */

	// Generate Column Classes
	.row {
		@for $i from 1 through $cols{
			@if $i == 1 and (index($enabledColumns, $i) or length($enabledColumns) == 0 ) {
				.one.column {
					width: columns($i);
				}
				.one.columns {
					// Fix for Sass bug
					// @extend .one.column
					width: columns($i);
				}
			}
			@else if (index($enabledColumns, $i) or length($enabledColumns) == 0 ) {
				.#{number-as-word($i)}.columns {
					width: columns($i);
				}
			}
		}
	}

	/* Push and Pull Classes */

	// Generate Push and Pull Classes
	.row {
		@for $i from 1 through $cols - 1 {
			@if ($enablePush) {
				.push_#{number-as-word($i)} {
					margin-left: push_x($i);
						&:first-child {
						margin-left: push_x($i, true);
					}
				}
			}
			@if ($enablePull) {
				.pull_#{number-as-word($i)} {
					// pull classes need to know the width of the container being pulled
					@for $j from 1 through $cols - 1 {
						@if $j == 1 {
							&.one.column {
								margin-left: pull_x($i, $j);
							}
						}
						@else {
							&.#{number-as-word($j)}.columns {
								margin-left: pull_x($i, $j);
							}
						}
					}
				}
			}
		}
	}

	/* Centered Classes */

	// Generate Centered Classes
	.row {
		@if ($enableCentered) {
			@for $i from 1 through $cols - 1 {
				.#{number-as-word($i)}.centered {
					margin-left: centered($i);
				}
			}
		}
	}
}



/* Hybrid Grid Columns */

// Generate Hybrid Grid Column Classes
@if ($enableHybrid) {
	.#{number-as-word($hybrid)}.colgrid .row {
		@for $i from 1 through $hybrid{
			@if $i == 1{
				.one.column {
					@include box-sizing();
					width: 100%;

					@include respond(tabletPortrait) {
						width: columns($i, true);
					}
				}
				.one.columns {
					@include box-sizing();
					width: 100%;

					@include respond(tabletPortrait) {
						// Temp fix for Sass bug
						// @extend .one.column
						width: columns($i, true);
					}
				}
			}
			@else{
				.#{number-as-word($i)}.columns{
					@include box-sizing();
					width: 100%;

					@include respond(tabletPortrait) {
						width: columns($i, true);
					}
				}
			}
		}
	}
}

/* Hybrid Push Classes */

// Generate Hybrid Push Classes
@if ($enableHybrid) {
	.#{number-as-word($hybrid)}.colgrid .row {
		@for $i from 1 through $hybrid - 1 {
			@if ($enablePush) {
				.push_#{number-as-word($i)} {
					@include respond(tabletPortrait) {
						margin-left: push_x($i, false, true);
						&:first-child {
							margin-left: push_x($i, true, true);
						}
					}
				}
			}
			@if ($enablePull) {
				.pull_#{number-as-word($i)} {
					// pull classes need to know the width of the container being pulled
					@for $j from 1 through $hybrid - 1 {
						@if $j == 1 {
							@include respond(tabletPortrait) {
								&.one.column {
									margin-left: pull_x($i, $j, true);
									&:first-child {
										margin-left: 0;
									}
								}
							}
						}
						@else {
							@include respond(tabletPortrait) {
								&.#{number-as-word($j)}.columns {
									margin-left: pull_x($i, $j, true);
									&:first-child {
										margin-left: 0;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

/* Hybrid Centered Classes */

// Generate Centered Classes
@if ($enableHybrid) {
	.#{number-as-word($hybrid)}.colgrid .row {
		@for $i from 1 through $hybrid - 1 {
			@if ($enableCentered) {
				.#{number-as-word($i)}.centered {
					margin-left: centered($i, true);
				}
			}
		}
	}
}

.pull_right { float: right; }

.pull_left { float: left; }

/* Tile Grid */

.tiles {
	display: block;
	overflow: hidden;
	> li {
		display: block;
		height: auto;
		float: left;
		padding-bottom:0;
	}
	&.two_up {
		margin-left: -4%;
		> li {
			margin-left: 4%;
			width: 46%;
		}
	}
	&.three_up, &.four_up {
		margin-left: -2%;
	}
	&.three_up > li {
		margin-left: 2%;
		width: 31.3%;
	}
	&.four_up > li {
		margin-left: 2%;
		width: 23%;
	}
	&.five_up {
		margin-left: -1.5%;
		> li {
			margin-left: 1.5%;
			width: 18.5%;
		}
	}
}

/* Nicolas Gallagher's micro clearfix */

.clearfix {
	@include clearfix();
}

.row {
	@include clearfix();
}


// vertically align stuff

.valign {
	display: table;
	width: 100%;
	> div {
		display: table-cell;
		vertical-align: middle;
	}â€‹
	> article {
		display: table-cell;
		vertical-align: middle;
	}
}

// semantic grid elements
section.wrapper {
	@include box-sizing();
	@include row();

	&.nested {
		@include row('nested');
	}
}
article.primary {
	@include box-sizing();
	@include column(8);
	@include push(2);
}

nav.secondary,
aside.tertiary {
	@include box-sizing();
	@include column(2);
}

nav.secondary {
	@include pull('left', 8, 2);
}

.two-up {
	@include column(6);
}