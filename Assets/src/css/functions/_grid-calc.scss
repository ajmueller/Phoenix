// Change $gutterWidth to a percentage
@if unit($gutterWidth) == 'px' {
	$gutterWidthInPx: $gutterWidth;
	$gutterWidth: percentage($gutterWidth / $rowMaxWidth);
}
@else {
	$gutterWidthInPx: ceil( ($gutterWidth / 100%) * $rowMaxWidth);
}

// Return single column width
@function oneColumn($options: ()) {
	$options: map-merge((
		includeGutterWidth: true
	), $options);

	@if map-get($options, includeGutterWidth) == true {
		@return (100% - (($columns - 1) * $gutterWidth)) / $columns;
	}
	@else {
		@return 100% / $columns;
	}
}

// Calculate Grid Column Widths
@function columns($n, $options: ()){
	$options: map-merge((
		includeGutterWidth: true
	), $options);

	@if map-get($options, includeGutterWidth) == true {
		@return (oneColumn($options) * $n) + ($gutterWidth * ($n - 1));
	}
	@else {
		@return oneColumn($options) * $n;
	}
}

// Calculate Push Class Margins
@function push_x($n, $options: ()) {
	$options: map-merge((
		firstChild: false,
		includeGutterWidth: true
	), $options);

	@if map-get($options, includeGutterWidth) == true {
		@return columns($n, $options) + $gutterWidth; // Column width + gutter
	}
	@else {
		@return columns($n, $options); // Column width
	}
}

// Calculate Pull Class Margins
@function pull_x($n, $width, $options: ()) {
	$options: map-merge((
		includeGutterWidth: true
	), $options);

	@if map-get($options, includeGutterWidth) == true {
		@return -(columns($n, $options) + columns($width, $options) + $gutterWidth); // -(Pull width + column width + gutter)
	}
	@else {
		@return -(columns($n, $options) + columns($width, $options)); // -(Pull width + column width)
	}
}

// Calculate Centered Class Margins
@function centered($n, $options: ()) {
	@return 50% - (columns($n, $options) / 2);
}

// Create class names from column count integers
@function number-as-word($n) {
	$words: "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven",
"twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen",
"twenty", "twenty-one", "twenty-two", "twenty-three", "twenty-four", "twenty-five", "twenty-six", "twenty-seven",
"twenty-eight", "twenty-nine", "thirty", "thirty-one", "thirty-two", "thirty-three",
"thirty-four", "thirty-five", "thirty-six";
	@return nth($words, $n);
}