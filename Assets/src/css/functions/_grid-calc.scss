////
/// @group grid
////

// Change $gutterWidth to a percentage
@if unit($gutterWidth) == 'px' {
	$gutterWidthInPx: $gutterWidth;
	$gutterWidth: percentage($gutterWidth / $rowMaxWidth);
}
@else {
/// The default gutter width between columns in pixels.  It represents the gutter width at the `$rowMaxWidth`.
/// @type Pixels
	$gutterWidthInPx: ceil( ($gutterWidth / 100%) * $rowMaxWidth);
}

/// Calculates the width of a single column.
/// @return {Percentage} The width of a single column.
@function oneColumn($options: ()) {
	$options: map-merge((
		columns: $columns,
		includeGutterWidth: true
	), $options);

	@if map-get($options, includeGutterWidth) == true {
		@return (100% - ((map-get($options, columns) - 1) * $gutterWidth)) / map-get($options, columns);
	}
	@else {
		@return 100% / map-get($options, columns);
	}
}

/// Calculates the width of n columns.
/// @param {Number} $n - The number of columns for which you wish to calculate the width.
/// @return {Percentage} The width of n columns.
@function columns($n, $options: ()){
	$options: map-merge((
		includeGutterWidth: true
	), $options);

	$columnWidth: oneColumn($options) * $n;

	@if map-get($options, includeGutterWidth) == true {
		$columnWidth: $columnWidth + ($gutterWidth * ($n - 1));
	}

	@return $columnWidth;
}

/// Calculates margin to position column within the grid system.
/// @param {Number} $n - The column position in which you wish to position an element.
/// @return {Percentage} The position in percentage width of the parent.
@function columnPosition($n, $options: ()) {
	$options: map-merge((
		includeGutterWidth: true
	), $options);

	// re-index to 0-based for proper margin calculations
	$n: $n - 1;

	$position: columns($n, $options);

	@if map-get($options, includeGutterWidth) == true {
		$position: $position + $gutterWidth;
	}

	@return $position;
}

/// Calculates the margin to properly center an element.
/// @param {Number} $n - The width (in columns) of the element being centered.
/// @return {Percentage} The margin necessary to center an element.
@function centered($n, $options: ()) {
	@return 50% - (columns($n, $options) / 2);
}

/// Create class names from column count integers.
/// @param {Integer} $n - The number of columns.
/// @return {String} A word representation of the number of columns requested.
@function number-as-word($n) {
	$words: "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen", "twenty", "twenty-one", "twenty-two", "twenty-three", "twenty-four", "twenty-five", "twenty-six", "twenty-seven", "twenty-eight", "twenty-nine", "thirty", "thirty-one", "thirty-two", "thirty-three", "thirty-four", "thirty-five", "thirty-six";

	@return nth($words, $n);
}