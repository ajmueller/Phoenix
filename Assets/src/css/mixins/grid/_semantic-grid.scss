////
/// @group grid
////

/// Defines defaults for column elements.
%column-config {
	float: $defaultFloat;
	margin: 0;
	min-height: 1px;
	width: 100%;
}

/// Creates a semantic-grid row.
/// @param {String} $nested [false] - Whether or not the row will be nested within other rows.
/// @param {Pixels | Ems} $padding [$gutterInPx] - A padding override to be set on the row.
/// @param {Pixels | Percentage} $maxWidth [$rowMaxWidth] - A max-width override to be set on the row.
/// @example
/// row()
/// @example
/// row((nested: false))
/// @example
/// row((padding: 0 50px 0 0))
@mixin row($options: ()) {
	$options: map-merge((
		nested: false,
		padding: $columnPadding,
		maxWidth: $rowMaxWidth
	), $options);

	$nested: map-get($options, nested);
	$padding: map-get($options, padding);
	$maxWidth: map-get($options, maxWidth);

	@extend %clearfix;
	margin-left: 0;
	margin-right: 0;
	min-width: 0;
	width: auto;

	@if $nested == true {
		margin-top: $columnPadding;
		padding: 0;

		&:first-child {
			margin-top: 0;
		}
	}
	@else {
		padding: $padding;
	}

	@include media(medium) {
		@if $nested == true {
			max-width: none;
			min-width: 0px;
			padding: 0;
			width: auto;
		}
		@else {
			margin: 0 auto;
			max-width: $maxWidth;
			width: 100%;
		}
	}
}

/// Creates a semantic-grid set of columns based on the base grid system settings.  On low resolutions, the columns will stack and will break at breakpointMedium to the number of columns specified.
/// @param {Number} $columns - The number of columns you wish your element's width to occupy.  Note that this can be an integer or decimal.
/// @param {Pixels | Ems} $padding [$gutterInPx] - A padding override to be set on the row.
/// @param {String} $nested [false] - Whether or not the columns will be contained within a nested row.
/// @param {String} $alignmnet [false] - Whether or not the columns will be centered within a row.  Default value: false.
/// @example
/// column(8)
/// @example
/// column(8, (padding: 10px))
@mixin column($columns, $options: ()) {
	$options: map-merge((
		shifted: false,
		padding: $columnPadding,
		nested: false,
		alignment: false,
		includeGutterWidth: true
	), $options);

	$shifted: map-get($options, shifted);
	$padding: map-get($options, padding);
	$nested: map-get($options, nested);
	$alignment: map-get($options, alignment);
	$includeGutterWidth: map-get($options, includeGutterWidth);

	@if $alignment == centered {
		@extend %column-config;
		padding: $padding;

		&:first-child {
			margin-top: 0;
		}

		@include media(medium) {
			clear: both;
			margin-left: centered($columns, $options);
			margin-top: 0;
			width: columns($columns, $options);
		}
	}
	@else {
		@extend %column-config;
		padding: $padding;

		@if $nested == true {
			margin-top: $columnPadding;

			&:first-child {
				margin-top: 0;
			}
		}

		@include media(medium) {
			@if $shifted == false and $includeGutterWidth == true {
				margin-left: $gutterWidth;

				&:first-child {
					margin-left: 0;
				}
			}

			margin-top: 0;
			width: columns($columns, $options);
		}
	}
}

/// Pushes a semantic-grid set of columns by the number of columns specified.
/// @param {Number} $columns - The number of columns to push the set of columns.
/// @param {Boolean} $includeGutterWidth [true] - Whether or not the columns will have a gutter applied.
/// @example
/// push(4)
/// @example
/// push(4, (includeGutterWidth: false))
@mixin push($columns, $options: ()) {
	$options: map-merge((
		includeGutterWidth: true
	), $options);

	@if ($columns > 0) {
		margin-left: 0;

		@include media(medium) {
			margin-left: push-x($columns, $options);
		}
	}
}


/// Pulls a semantic-grid set of columns by the number of columns specified.
/// @param {Number} $columns - The number of columns to pull the set of columns.
/// @param {Number} $width - The width, as a number of columns, of the set of columns being pulled.
/// @param {Boolean} $includeGutterWidth [true] - Whether or not the columns will have a gutter applied.
/// @example
/// pull(4, 12)
/// @example
/// pull(4, 12, (includeGutterWidth: false))
@mixin pull($columns, $width, $options: ()) {
	$options: map-merge((
		includeGutterWidth: true
	), $options);

	@if ($columns > 0 and $width > 0) {
		margin-left: 0;

		@include media(medium) {
			margin-left: pull-x($columns, $width, $options);

			&:first-child {
				margin-left: 0;
			}
		}
	}
}